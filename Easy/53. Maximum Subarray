"""
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
"""
###############################################################################################################################
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        
        currentMax = 0
        maxF = float('-inf')
        start = 0
        end = 0
        s = 0
        
        for i in range(len(nums)):
            currentMax += nums[i]
            if maxF < currentMax:
                maxF = currentMax
                start = s
                end = i
            if currentMax < 0:
                currentMax = 0
                s = i+1
        print(nums[start:end+1])
        if maxF < 0:
            return max(nums)
        else:
            return maxF
