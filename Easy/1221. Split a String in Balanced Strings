"""
Balanced strings are those who have equal quantity of 'L' and 'R' characters.

Given a balanced string s split it in the maximum amount of balanced strings.

Return the maximum amount of splitted balanced strings.

 

Example 1:

Input: s = "RLRRLLRLRL"
Output: 4
Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.
Example 2:

Input: s = "RLLLLRRRLR"
Output: 3
Explanation: s can be split into "RL", "LLLRRR", "LR", each substring contains same number of 'L' and 'R'.
Example 3:

Input: s = "LLLLRRRR"
Output: 1
Explanation: s can be split into "LLLLRRRR".
Example 4:

Input: s = "RLRRRLLRLL"
Output: 2
Explanation: s can be split into "RL", "RRRLLRLL", since each substring contains an equal number of 'L' and 'R'
 
"""
############################################################################################################################
class Solution:
    def balancedStringSplit(self, s: str) -> int:
        if len(s) == 1:
            return 0
        stack = []
        count = 0
        stack.append(s[0])
        for i in range(1,len(s)):
            if stack != []:
                if s[i] == 'L' and stack[-1] == 'R':
                    #print(stack)
                    stack.pop()
                elif s[i] == 'R' and stack[-1] == 'L':
                    #print(stack)
                    stack.pop()
                else:
                    stack.append(s[i])
                if stack == []:
                    count += 1
            else:
                stack.append(s[i])
                
        return count 
            
            
